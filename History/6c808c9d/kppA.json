// Place your key bindings in this file to override the defaultsauto[]
[
  // Toggle Zen Mode
  {
    "key": "ctrl+e",
    "command": "workbench.action.toggleZenMode"
  },

  // Toggle Terminal (Ã±)
  {
    "key": "ctrl+[Semicolon]",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },

  // Comment code
  {
    "key": "ctrl+shift+c",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly"
  },

  // Format Document
  {
    "key": "ctrl+shift+f",
    "command": "editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
  },

  // Scroll Down in popup lists
  {
    "key": "ctrl+j",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "down",
    "command": "-list.focusDown",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+j",
    "command": "list.scrollDown",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'bottom'"
  },

  // Scroll Up in popup lists
  {
    "key": "ctrl+k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "up",
    "command": "-list.focusUp",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+k",
    "command": "list.scrollUp",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'top'"
  },

  // Tabs hopping
  {
    "key": "ctrl+tab",
    "command": "-workbench.action.quickOpenNavigateNextInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen"
  },

  // Terminals hopping
  {
    "key": "ctrl+tab",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },

  // Explorer
  // New Folder
  {
    "key": "ctrl+shift+n",
    "command": "explorer.newFolder"
  },

  // New File
  {
    "key": "ctrl+n",
    "command": "explorer.newFile"
  },

  // Toggle file explorer with "halflife-console" key and manages the focus
  // If Explorer is visible, close it
  {
    "key": "oem_5",
    "command": "workbench.action.closeSidebar",
    "when": "explorerViewletVisible"
  },
  // If Explorer is not visible, open it and focus
  {
    "key": "oem_5",
    "command": "workbench.view.explorer",
    "when": "!explorerViewletVisible"
  },

  // Text Zoom - Zoom In
  {
    "key": "ctrl+oem_plus",
    "command": "editor.action.fontZoomIn"
  },
  {
    "key": "ctrl+numpad_add",
    "command": "editor.action.fontZoomIn"
  },

  // Text Zoom - Zoom Out
  {
    "key": "ctrl+oem_minus",
    "command": "editor.action.fontZoomOut"
  },
  {
    "key": "ctrl+numpad_subtract",
    "command": "editor.action.fontZoomOut"
  },

  // UI Zoom - Zoom In
  {
    "key": "ctrl+shift+oem_plus",
    "command": "workbench.action.zoomIn"
  },
  {
    "key": "ctrl+shift+numpad_add",
    "command": "workbench.action.zoomIn"
  },

  // UI Zoom - Zoom Out
  {
    "key": "ctrl+shift+oem_minus",
    "command": "workbench.action.zoomOut"
  },
  {
    "key": "ctrl+shift+numpad_subtract",
    "command": "workbench.action.zoomOut"
  },

  // GOTO Definition
  {
    "key": "ctrl+g",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus"
  },
  {
    "key": "f12",
    "command": "-editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus"
  },

  // Neovim "0" goes to the first char in the line, not just the beginning of the line
  {
    "command": "vscode-neovim.send",
    "key": "0",
    "when": "editorTextFocus && neovim.mode == 'normal'",
    "args": ":normal ^<CR>"
  },

  // CTRL + A selects all the doc's text
  {
    "key": "ctrl+a",
    "command": "editor.action.selectAll",
    "when": "editorTextFocus"
  },

  // Page Up
  {
    "key": "ctrl+u",
    "command": "cursorPageUp"
  },
  {
    "key": "pageup",
    "command": "cursorPageUp"
  },

  // Page Down
  {
    "key": "ctrl+d",
    "command": "cursorPageDown"
  },
  {
    "key": "pagedown",
    "command": "cursorPageDown"
  },

  // Go down in VSCode pop-up lists (autocomplete, command palette, etc.)
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },

  // Neovim "0" goes to the first char in the line, not just the beginning of the line
  {
    "command": "vscode-neovim.send",
    "key": "0",
    "when": "editorTextFocus && neovim.mode == 'normal'",
    "args": ":normal ^<CR>"
  },

  // CTRL + A selects all the doc's text
  {
    "key": "ctrl+a",
    "command": "editor.action.selectAll",
    "when": "editorTextFocus"
  },

  // Shift+7 opens search only in editor Normal/Visual mode (Neovim)
  {
    "key": "shift+7",
    "command": "actions.find",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  }
]
